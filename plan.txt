I am creating a website that manages my security agency's payroll and employees.

For the backend, I will be using Nestjs
For frontend, I will be using React TS and Mantine
For database, Postgres and Prisma ORM

The idea is - 

As I run security agency and employee outsourcing, there will be multiple companies and employees working under me for those different companies.

For company creation, 
We will take name, address, contactPersondetails and salary template (like PF, ESIC, Company Name and all which will be later used in generating salary sheet for that particular company)

For employee registration,
We will take all his details like name, contact details, bank account details and also the company he will be working at present (like joining data, salary for the company and so on.. and later I should be able to update the company details and this can be in the form of an array like storing the work history of an employee)

For attendance,
we will open a company, select month, and there will be a display of all the employees working under that company and will mark the present count in a month

For salary,
We will not process salaries, but will calculate salaries for all the employees working in a company. We will select company, select month and there we will calculate the salary with the salary template fields specified for this particular company. And generate report.




ok so let's come to the salary part

firstly, i am not sure if this is the right approach (you can give me suggestions on the flow of the frontend as this will be for production),

the admin will come to salary page, the first step will be to select a company, then select month in (MM-YYYY), then there will be a list of all the employees in the company and it can be in a tabular form where there will be headings as salary template fields which we take while onboarding the company

if i get company by id the data 

{
  "statusCode": 200,
  "message": "Company fetched successfully",
  "data": {
    "name": "GOOGLE",
    "address": "STRING",
    "contactPersonName": "STRING",
    "contactPersonNumber": "STRING",
    "status": "ACTIVE",
    "companyOnboardingDate": "12-12-2012",
    "salaryTemplates": [
      {
        "fields": {
          "pf": {
            "value": "string",
            "enabled": true
          },
          "lwf": {
            "value": "string",
            "enabled": true
          },
          "esic": {
            "value": "string",
            "enabled": true
          },
          "name": {
            "value": "string",
            "enabled": true
          },
          "bonus": {
            "value": "string",
            "enabled": true
          },
          "advance": {
            "value": "string",
            "enabled": true
          },
          "penalty": {
            "value": "string",
            "enabled": true
          },
          "uniform": {
            "value": "string",
            "enabled": true
          },
          "basicPay": {
            "value": "string",
            "enabled": true
          },
          "dutyDone": {
            "value": "string",
            "enabled": true
          },
          "epfWages": {
            "value": "string",
            "enabled": true
          },
          "basicDuty": {
            "value": "string",
            "enabled": true
          },
          "netSalary": {
            "value": "string",
            "enabled": true
          },
          "uanNumber": {
            "value": "string",
            "enabled": true
          },
          "esicNumber": {
            "value": "string",
            "enabled": true
          },
          "fatherName": {
            "value": "string",
            "enabled": true
          },
          "companyName": {
            "value": "string",
            "enabled": true
          },
          "designation": {
            "value": "string",
            "enabled": true
          },
          "grossSalary": {
            "value": "string",
            "enabled": true
          },
          "monthlyRate": {
            "value": "string",
            "enabled": true
          },
          "wagesPerDay": {
            "value": "string",
            "enabled": true
          },
          "pfPaidStatus": {
            "value": "string",
            "enabled": true
          },
          "advanceGivenBy": {
            "value": "string",
            "enabled": true
          },
          "otherAllowance": {
            "value": "string",
            "enabled": true
          },
          "otherDeductions": {
            "value": "string",
            "enabled": true
          },
          "totalDeductions": {
            "value": "string",
            "enabled": true
          },
          "esicFilingStatus": {
            "value": "string",
            "enabled": true
          },
          "otherAllowanceRemark": {
            "value": "string",
            "enabled": true
          },
          "otherDeductionsRemark": {
            "value": "string",
            "enabled": true
          }
        }
      }
    ]
  }
}

so as you can see the fields are here

we can retrieve the salary of the employee, and let me give you an example

- Tarun's monthly salary is 11032
- Basic Duty (This will be taken while onboarding a company, each company has different Basic Duty (24, 25, 26, 27, 28, 29, 30, 31).. you can get it from the salary template) (Basic Duty example: 26)
- Duty Done (The input will be coming from admin.. where the admin marks the number of duty Tarun has done. Example: 29 (including night duty))
- Wages per day (If the field is available, then it will be autofilled by monthly salary/basic duty which is 11032/26 = 424.3)
- Basic Pay (This will be wages per day * duty done ==> 424.3*29 = 12304.7)
- EPF wages (this is there to let the admin know that EPF will be deducted on the basic duty only so here the value will be 11032 (i.e., the salary will be counted officially for basic duty only mentioned by the company initially))
- Bonus (If there is a field Bonus enabled by the company, then the bonus percentage should be 8.33% of the monthly salary which is 919 here and by default value 0)
- Gross salary (Basic pay + Bonus = 12304.7+919 = 13224)
- PF @12% (if enabled, Basic pay * 12% = 1477)
- ESIC @0.75 (if enabled, Gross salary * 0.75% = 99)
- Advance and Uniform (If these two are enabled, the default value will be 0 and the admin will enter if there is any for any employee)
- Penalty (if enabled, default is 0 and is also optional by the admin for individual employee)
- LWF (If enabled, default value is 10)
PF, ESIC, ADVANCE, UNIFORM, PENALTY, LWF (they all come under deductions)
- Other deductions (if enabled, the default value is 0, is also as per employee)
- Other deductions remark (string value to give the reason for other deductions)
- Allowance and allowance remark (allowance if enabled, default is 0, and will be used as per employee and the remark to give it the reason)
- Total deductions (Add all the deductions)
- Net salary (Gross salary - total duductions = 11638)


update this with the apis below

you can get user departments using this api 

http://localhost:3003/departments/user-departments

{
  "statusCode": 200,
  "message": "Departments fetched successfully!",
  "data": [
    {
      "id": "a3ef36e8-465c-403a-8696-120a22a18600",
      "name": "HR"
    },
    {
      "id": "b9af8b86-8df2-473e-bf88-53a2dde5ca1f",
      "name": "OPERATIONS"
    },
    {
      "id": "4ca10568-60d0-44da-99d3-d8ee28ec5a03",
      "name": "ACCOUNTS"
    },
    {
      "id": "c9744067-652b-4478-8d59-bdae571fef99",
      "name": "FIELD"
    },
    {
      "id": "3867a70f-f438-4222-8b9a-f9d57287b348",
      "name": "ADMIN"
    }
  ]
}

you can get the roles of the user from this

export enum Role {
    HR = 'HR',
    OPERATIONS = 'OPERATIONS',
    ACCOUNTS = 'ACCOUNTS',
    FIELD = 'FIELD',
    ADMIN = 'ADMIN',
    USER = 'USER',
  }

import { ApiProperty } from '@nestjs/swagger';
import {
  IsString,
  IsNotEmpty,
  IsEmail,
  MinLength,
  MaxLength,
  IsEnum,
  IsOptional,
} from 'class-validator';
import { Role } from '../enum/roles.enum';

export class RegisterDto {
  @IsNotEmpty()
  @IsString()
  @ApiProperty()
  name: string;

  @IsNotEmpty()
  @IsString()
  @MinLength(10)
  @MaxLength(10)
  @ApiProperty()
  mobileNumber: string;

  @IsNotEmpty()
  @IsEmail()
  @ApiProperty()
  email: string;

  @IsNotEmpty()
  @IsString()
  @MinLength(6)
  @MaxLength(20)
  @ApiProperty()
  password: string;

  @IsOptional()
  @IsEnum(Role)
  @ApiProperty({
    enum: Role,
    enumName: 'Role',
    description: 'User role',
    default: Role.USER,
  })
  role: Role = Role.USER;

  @IsNotEmpty()
  @IsString()
  @ApiProperty()
  departmentId: string;
}this is the register dto from the backend for reference

http://localhost:3003/users/register
this is the register api with payload 

{
  "name": "Tarun Vadde",
  "mobileNumber": "9515764702",
  "email": "tarun@soulverse.us",
  "password": "tarunvadde461",
  "role": "ADMIN",
  "departmentId": "3867a70f-f438-4222-8b9a-f9d57287b348"
}

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3MWE5ZDE1OC1hYmU5LTQ5ZTQtYWZlMS1kNTg2NThmOTUxY2UiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3MjA4NTUwMTcsImV4cCI6MTcyMDg1ODYxN30.-fbeM_cGzP6M1KBmUQeQLbGuzYqeTaiGT0YotIJTlSE",
  "refreshToken": "bec25e5a-a68a-4ae2-bad3-503b07a4e1cf"
}

http://localhost:3003/users/login
{
  "email": "tarun2@soulverse.us",
  "password": "tarunvadde461"
}

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3YmNkMGIwYS1iOGRlLTRkODYtOTk2Yy1mOTU2ODQ0MDRiYjQiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3MjA4NTU0NjcsImV4cCI6MTcyMDg1OTA2N30.yValGLSgRsDEbTpmW8mVlG3YNB3hgqfCTpypz-m_3ag",
  "refreshToken": "0d9d2ec0-cf12-4ccf-8458-eba28bb6b382"
}

below is to refresh the token
http://localhost:3003/users/refresh-token/0d9d2ec0-cf12-4ccf-8458-eba28bb6b382

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3YmNkMGIwYS1iOGRlLTRkODYtOTk2Yy1mOTU2ODQ0MDRiYjQiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3MjA4NTU0OTUsImV4cCI6MTcyMDg1OTA5NX0.saycfBe3DiqjLC3MUywVt2EPCeUXbcooyIgdej4Ivlk",
  "refreshToken": "17d46131-b53b-4af3-991d-4b78a7d008cd"
}

{
  "email": "tarun2@soulverse.us"
}

this is for forgot password 
http://localhost:3003/users/forgot-password

{
  "status": 200,
  "message": "Email sent!"
}

and below is the email i get with a link 

You recently requested to reset your password.

Please click on the following link to reset your password:

http://localhost:3000/users/reset-password?token=_f3V8il1dM29tqptZOlyotMVrp_ilsb03c6TuuQb8aKdVZH5jtc4DN6nkLBhAtWa

This link will expire in 1 hour.

If you did not request a password reset, please ignore this email and your password will remain unchanged.

which i want to handle

{
  "resetToken": "string",
  "newPassword": "string"
}

http://localhost:3003/users/reset-password



You are a senior backend developer specialized in nestjs, typescript, postgres, prisma and system design and also experience in developing frontend too. you are very professional and develop production grade apis.

<context>
Tulsyan Security Solutions (TSS) requires a web-based management system to transition their security agency operations from offline to online. The system will manage employees (security guards, helpers), client companies, attendance tracking, and payroll processing.
</context>

<aim>
create an api that takes basic information of a company like company name, status, contact person name, contact person number, onboarding date, address and also their salary template for the employees who are going to work for them under us because we outsource our employees to work at different companies
</aim>

<current_api>
### schema.prisma ###
model Company {
  id                    String           @id @default(uuid())
  name                  String
  address               String
  contactPersonName     String
  contactPersonNumber   String
  status                String
  companyOnboardingDate String
  salaryTemplates       SalaryTemplate[]
  salaryRecords         SalaryRecord[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  PayrollPeriod         PayrollPeriod[]
  Attendance            Attendance[]
  Salary                Salary[]

  EmploymentHistory EmploymentHistory[]
}
model SalaryTemplate {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  fields    Json // Store the enabled/disabled status and default values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model SalaryRecord {
  id         String   @id @default(uuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  month      DateTime
  salaryData Json // Store all salary-related fields
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([employeeId, companyId, month])
}

model PayrollPeriod {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  startDate DateTime
  endDate   DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Attendance {
  id           String   @id @default(uuid())
  employeeId   String
  month        String
  presentCount Int
  companyId    String?
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company      Company? @relation(fields: [companyId], references: [id])

  @@unique([employeeId, companyId, month])
}


model Salary {
  id                    String   @id @default(uuid())
  month                 String // Format: MM-YYYY
  monthlySalary         Float
  dutyDone              Int
  wagesPerDay           Float
  basicPay              Float
  epfWages              Float
  bonus                 Float
  grossSalary           Float
  pf                    Float
  esic                  Float
  advance               Float
  uniform               Float
  penalty               Float
  lwf                   Float
  otherDeductions       Float
  otherDeductionsRemark String?
  allowance             Float
  allowanceRemark       String?
  totalDeductions       Float
  netSalary             Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String

  @@unique([employeeId, companyId, month])
}


model EmploymentHistory {
  id              String             @id @default(uuid())
  employeeId      String?
  employee        Employee?          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  companyName     String
  designationName String
  departmentName  String
  companyId       String
  company         Company            @relation(fields: [companyId], references: [id])
  designationId   String
  designation     Designation        @relation(fields: [designationId], references: [id])
  departmentId    String
  department      EmployeeDepartment @relation(fields: [departmentId], references: [id])
  salary          Float
  joiningDate     String
  leavingDate     String?
  status          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

### CONTROLLER METHOD ###

  @HttpCode(HttpStatus.CREATED)
  @Post()
  @ApiOperation({ summary: 'Create a new company' })
  @ApiResponse({
    status: 201,
    description: 'The company has been successfully created.',
  })
  @ApiResponse({ status: 400, description: 'Bad Request.' })
  async createCompany(
    @Res() res: Response,
    @Body() data: CreateCompanyDto,
  ): Promise<Response> {
    const response = await this.companyService.createCompany(data);
    return res.status(response.statusCode).json(response);
  }

  ### DTO ### 

  import { ApiProperty, OmitType, PartialType } from '@nestjs/swagger';
import {
  IsString,
  ValidateNested,
  IsOptional,
  IsBoolean,
  IsEnum,
} from 'class-validator';
import { Type, Transform } from 'class-transformer';
import { IsDateFormat } from 'src/common/validators/date-format.decorator';
import { Status } from 'src/employee/enum/employee.enum';

class SalaryTemplateFieldDto {
  @ApiProperty()
  @IsBoolean()
  enabled: boolean;

  @ApiProperty({ required: false })
  @IsOptional()
  @IsString()
  value?: string;
}

export class SalaryTemplateDto {
  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  name: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  fatherName: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  companyName: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  designation: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  monthlyRate: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  basicDuty: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  dutyDone: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  wagesPerDay: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  basicPay: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  epfWages: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  otherAllowance: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  otherAllowanceRemark: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  bonus: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  grossSalary: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  pf: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  esic: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  advance: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  uniform: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  advanceGivenBy: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  penalty: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  lwf: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  otherDeductions: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  otherDeductionsRemark: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  totalDeductions: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  netSalary: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  uanNumber: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  pfPaidStatus: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  esicNumber: SalaryTemplateFieldDto;

  @ApiProperty({ type: () => SalaryTemplateFieldDto })
  @ValidateNested()
  @Type(() => SalaryTemplateFieldDto)
  esicFilingStatus: SalaryTemplateFieldDto;
}

export class CreateCompanyDto {
  @ApiProperty({ required: true })
  @Transform(({ value }) => value?.toUpperCase())
  @IsString()
  name: string;

  @ApiProperty({ required: true })
  @Transform(({ value }) => value?.toUpperCase())
  @IsString()
  address: string;

  @ApiProperty({ required: true })
  @Transform(({ value }) => value?.toUpperCase())
  @IsString()
  contactPersonName: string;

  @ApiProperty({ required: true })
  @Transform(({ value }) => value?.toUpperCase())
  @IsString()
  contactPersonNumber: string;

  @ApiProperty({ required: true, enum: Status })
  @IsEnum(Status)
  status: Status;

  @ApiProperty({ required: true })
  @IsDateFormat({
    message: 'companyOnboardingDate must be in the format DD-MM-YYYY',
  })
  companyOnboardingDate: string;

  @ApiProperty({ required: true, type: () => SalaryTemplateDto })
  @ValidateNested()
  @Type(() => SalaryTemplateDto)
  salaryTemplates: SalaryTemplateDto[];
}

export class UpdateCompanyDto extends PartialType(
  OmitType(CreateCompanyDto, ['salaryTemplates'] as const),
) {
  @ApiProperty({ required: false, type: () => SalaryTemplateDto })
  @IsOptional()
  @ValidateNested()
  @Type(() => SalaryTemplateDto)
  salaryTemplates?: SalaryTemplateDto[];
}


### SERVICE ###
  async createCompany(data: CreateCompanyDto): Promise<IResponse<Company>> {
    try {
      const companyExists = await this.companyRepository.companyExists(
        data.name,
      );
      if (companyExists) {
        throw new ConflictException(
          `Company with name: ${data.name} already exists.`,
        );
      }
      const createCompanyResponse = await this.companyRepository.create(data);
      if (!createCompanyResponse) {
        throw new BadRequestException(`Error creating company`);
      }
      return {
        statusCode: HttpStatus.CREATED,
        message: 'Company created successfully',
        data: createCompanyResponse,
      };
    } catch (error) {
      this.logger.error(`Error creating company`);
      throw error;
    }
  }

  ### REPOSITORY ###
    async create(data: CreateCompanyDto): Promise<Company> {
    const {
      name,
      address,
      contactPersonName,
      contactPersonNumber,
      salaryTemplates,
      status,
      companyOnboardingDate,
    } = data;

    const company = await this.prisma.company.create({
      data: {
        name,
        address,
        contactPersonName,
        contactPersonNumber,
        status,
        companyOnboardingDate,
        salaryTemplates: {
          create: {
            fields: salaryTemplates as any,
          },
        },
      },
      include: {
        salaryTemplates: true,
      },
    });

    return company;
  }

</current_api>

now this currently works but this is unacceptable and looks like a junior developer has written this with no production level handling, no vision for future changes 

now for salary template fields configuration, i want some fields to be mandatory to be enabled with no rules like 
<mandatory_to_enable_no_rules>
s.no, 
company name, 
name, 
designation, 
monthly pay, 
bonus, (allowance)
gross salary, 
PF12%, (deduction)
ESIC0.75%, (deduction)
Net salary
Total deduction
</mandatory_to_enable_no_rules>


<mandatory_to_enable_with_rules>
basic duty (ranging from 26 to 31),
</mandatory_to_enable_with_rules>

<optional fields with no rules>
status,
UAN no.
PF Paid Status
ESIC NO
ESIC Filing status
Bank account number
IFSC Code
Father name
Wages per day 
EPF Wages
Advance (deduction)
Uniform (deduction)
Penalty (deduction)
other deductions
</optional fields with no rules>

<optional fields with rules>
other deductions (with remarks)
Salary paid status (PAID, PENDING, HOLD)
LWF (default value is 10)(deduction)
</optional fields with rules>

i also want a feature where the admin who is creating this company can configure a custom salary field


in the end, the admin should be able to calculate payroll for all the employees working under this company using a calculate payroll api

so in the calculate payroll api, we fetch the employees working under this company, we fetch the salary template, their allowances, their deductions and some fields like monthly pay will be fetched from employee database and one field basic duty will be fetched from the value admin entered ranging from 26 to 31


so create createCompany API. Give me the code in full, starting from db model update, to dto (swagger configured), controller method, service method and repository method with proper error handling


