datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  department   UserDepartment @relation(fields: [departmentId], references: [id])
  departmentId String
  password     String
  role         Role
  createdAt    DateTime       @default(now())
}

model UserDepartment {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model EmployeeDepartment {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
}

model Designation {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PresentDaysCount {
  D26
  D27
  D28
  D29
  D30
  D31
}

enum PFOptions {
  TWELVE_PERCENT
  NO
}

enum ESICOptions {
  ZERO_POINT_SEVEN_FIVE_PERCENT
  NO
}

enum BONUSOptions {
  EIGHT_POINT_THREE_THREE_PERCENT
  NO
}

enum LWFOptions {
  TEN_RUPEES
  NO
}

model Company {
  id                   String      @id @default(uuid())
  name                 String
  address              String
  contactPersonName    String
  contactPersonNumber  String
  createdAt            DateTime    @default(now())
  presentDaysCount     String
  PF                   String
  ESIC                 String
  BONUS                String
  LWF                  String
  otherAllowance       Int
  otherAllowanceRemark String?

  employees   Employee[]
  attendances Attendance[]
  Salary      Salary[]
}


enum Category {
  SC
  ST
  OBC
  GENERAL
}

enum EducationQualification {
  UNDER_8
  EIGHT
  TEN
  TWELVE
  GRADUATE
  POST_GRADUATE
}

enum Gender {
  MALE
  FEMALE
}

enum Title {
  MR
  MS
}

model Employee {
  id                            String                 @id @default(dbgenerated("concat('TSS', lpad(floor(random() * 10000)::text, 4, '0'))"))
  title                         Title
  firstName                     String
  lastName                      String
  designationId                 String
  designationName               String
  designation                   Designation            @relation(fields: [designationId], references: [id])
  employeeDepartmentId          String
  employeeDepartmentName        String
  department                    EmployeeDepartment     @relation(fields: [employeeDepartmentId], references: [id])
  mobileNumber                  String
  companyName                   String
  companyId                     String
  company                       Company                @relation(fields: [companyId], references: [id])
  recruitedBy                   String
  gender                        Gender
  fatherName                    String
  motherName                    String
  husbandName                   String?
  category                      Category
  dateOfBirth                   String
  age                           Int                    @default(0)
  dateOfJoining                 String
  highestEducationQualification EducationQualification
  bloodGroup                    String
  permanentAddress              String
  presentAddress                String
  city                          String
  district                      String
  state                         String
  pincode                       Int
  referenceName                 String
  referenceAddress              String
  referenceNumber               String
  bankAccountNumber             String
  ifscCode                      String
  bankCity                      String
  bankName                      String
  pfUanNumber                   String
  esicNumber                    String
  policeVerificationNumber      String
  policeVerificationDate        String
  trainingCertificateNumber     String
  trainingCertificateDate       String
  medicalCertificateNumber      String
  medicalCertificateDate        String
  photoUpload                   String
  aadhaarUpload                 String
  panCardUpload                 String
  bankPassbook                  String
  markSheet                     String
  otherDocument                 String
  salary                        Float
  aadhaarNumber                 String
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  attendances                   Attendance[]
  salaries                      Salary[]

  @@index([aadhaarNumber], name: "idx_aadhaarNumber")
  @@index([mobileNumber], name: "idx_mobileNumber")
}

model Attendance {
  id           String   @id @default(uuid())
  employeeId   String
  month        String
  presentCount Int
  companyId    String?
  // attendanceSheetUrl String
  employee     Employee @relation(fields: [employeeId], references: [id])
  company      Company? @relation(fields: [companyId], references: [id])

  @@unique([employeeId, companyId, month])
}

model AttendanceSheet {
  id                 String @id @default(uuid())
  companyId          String
  month              String
  attendanceSheetUrl String

  @@unique([companyId, month])
}

enum Status {
  PRESENT
  ABSENT
}

model Salary {
  id         String   @id @default(uuid())
  employeeId String
  companyId  String
  amount     Float
  date       DateTime
  employee   Employee @relation(fields: [employeeId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
}
