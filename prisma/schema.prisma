datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  HR
  OPERATIONS
  ACCOUNTS
  FIELD
  ADMIN
  USER
}

model User {
  id           String         @id @default(uuid())
  name         String
  mobileNumber String
  email        String         @unique
  department   UserDepartment @relation(fields: [departmentId], references: [id])
  departmentId String
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
}

model UserDepartment {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model EmployeeDepartment {
  id   String @id @default(uuid())
  name String @unique
  // employees Employee[]

  EmploymentHistory EmploymentHistory[]
}

model Designation {
  id   String @id @default(uuid())
  name String @unique
  // employees Employee[]

  EmploymentHistory EmploymentHistory[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PresentDaysCount {
  D26
  D27
  D28
  D29
  D30
  D31
}

enum PFOptions {
  TWELVE_PERCENT
  NO
}

enum ESICOptions {
  ZERO_POINT_SEVEN_FIVE_PERCENT
  NO
}

enum BONUSOptions {
  EIGHT_POINT_THREE_THREE_PERCENT
  NO
}

enum LWFOptions {
  TEN_RUPEES
  NO
}

model Company {
  id                    String           @id @default(uuid())
  name                  String
  address               String
  contactPersonName     String
  contactPersonNumber   String
  status                String
  companyOnboardingDate String
  salaryTemplates       SalaryTemplate[]
  salaryRecords         SalaryRecord[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  PayrollPeriod         PayrollPeriod[]
  Attendance            Attendance[]
  Salary                Salary[]

  EmploymentHistory EmploymentHistory[]
}

model SalaryTemplate {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  fields    Json // Store the enabled/disabled status and default values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalaryRecord {
  id         String   @id @default(uuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  month      DateTime
  salaryData Json // Store all salary-related fields
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([employeeId, companyId, month])
}

model PayrollPeriod {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  startDate DateTime
  endDate   DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  SC
  ST
  OBC
  GENERAL
}

enum EducationQualification {
  UNDER_8
  EIGHT
  TEN
  TWELVE
  GRADUATE
  POST_GRADUATE
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Title {
  MR
  MS
}

model Employee {
  id                            String   @id @default(dbgenerated("concat('TSS', lpad(floor(random() * 10000)::text, 4, '0'))"))
  title                         Title
  firstName                     String
  lastName                      String
  dateOfBirth                   String
  gender                        Gender
  fatherName                    String
  motherName                    String
  husbandName                   String?
  bloodGroup                    String
  highestEducationQualification String
  employeeOnboardingDate        String
  employeeRelievingDate         String?
  status                        Status
  category                      Category
  recruitedBy                   String
  age                           Int      @default(0)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  // Relations
  contactDetails      EmployeeContactDetails?
  bankDetails         EmployeeBankDetails?
  additionalDetails   EmployeeAdditionalDetails?
  referenceDetails    EmployeeReferenceDetails?
  documentUploads     EmployeeDocumentUploads?
  employmentHistories EmploymentHistory[]
  salaryRecords       SalaryRecord[]
  attendances         Attendance[]
  salaries            Salary[]
}

model EmploymentHistory {
  id              String             @id @default(uuid())
  employeeId      String?
  employee        Employee?          @relation(fields: [employeeId], references: [id])
  companyName     String
  designationName String
  departmentName  String
  companyId       String
  company         Company            @relation(fields: [companyId], references: [id])
  designationId   String
  designation     Designation        @relation(fields: [designationId], references: [id])
  departmentId    String
  department      EmployeeDepartment @relation(fields: [departmentId], references: [id])
  salary          Float
  joiningDate     String
  leavingDate     String?
  status          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model EmployeeContactDetails {
  id               String   @id @default(uuid())
  employeeId       String   @unique
  mobileNumber     String
  aadhaarNumber    String
  permanentAddress String
  presentAddress   String
  city             String
  district         String
  state            String
  pincode          Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([mobileNumber])
  @@index([aadhaarNumber])
}

model EmployeeBankDetails {
  id                String   @id @default(uuid())
  employeeId        String   @unique
  bankAccountNumber String
  ifscCode          String
  bankName          String
  bankCity          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeAdditionalDetails {
  id                        String   @id @default(uuid())
  employeeId                String   @unique
  pfUanNumber               String
  esicNumber                String
  policeVerificationNumber  String
  policeVerificationDate    String
  trainingCertificateNumber String
  trainingCertificateDate   String
  medicalCertificateNumber  String
  medicalCertificateDate    String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeReferenceDetails {
  id               String   @id @default(uuid())
  employeeId       String   @unique
  referenceName    String
  referenceAddress String
  referenceNumber  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
}

model EmployeeDocumentUploads {
  id                   String   @id @default(uuid())
  employeeId           String   @unique
  photo                String
  aadhaar              String
  panCard              String
  bankPassbook         String
  markSheet            String
  otherDocument        String
  otherDocumentRemarks String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id           String   @id @default(uuid())
  employeeId   String
  month        String
  presentCount Int
  companyId    String?
  employee     Employee @relation(fields: [employeeId], references: [id])
  company      Company? @relation(fields: [companyId], references: [id])

  @@unique([employeeId, companyId, month])
}

model AttendanceSheet {
  id                 String @id @default(uuid())
  companyId          String
  month              String
  attendanceSheetUrl String

  @@unique([companyId, month])
}

// model Salary {
//   id         String   @id @default(uuid())
//   employeeId String
//   companyId  String
//   amount     Float
//   date       DateTime
//   data       Json // Store all salary components
//   employee   Employee @relation(fields: [employeeId], references: [id])
//   company    Company  @relation(fields: [companyId], references: [id])
// }

model Salary {
  id                    String   @id @default(uuid())
  employeeId            String
  companyId             String
  month                 String // Format: MM-YYYY
  monthlySalary         Float
  dutyDone              Int
  wagesPerDay           Float
  basicPay              Float
  epfWages              Float
  bonus                 Float
  grossSalary           Float
  pf                    Float
  esic                  Float
  advance               Float
  uniform               Float
  penalty               Float
  lwf                   Float
  otherDeductions       Float
  otherDeductionsRemark String?
  allowance             Float
  allowanceRemark       String?
  totalDeductions       Float
  netSalary             Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  employee              Employee @relation(fields: [employeeId], references: [id])
  company               Company  @relation(fields: [companyId], references: [id])

  @@unique([employeeId, companyId, month])
}
